const CACHE_NAME = 'yopta-static-v1';
const API_CACHE = 'yopta-api-v1';
const FILES_TO_CACHE = [
    '/',
    '/dictionary',
    '/index.html',
    '/svg/logo.svg',
    '/styles.css',
    '/main.js',
];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞
self.addEventListener('install', event => {
    event.waitUntil(
        caches.open(CACHE_NAME).then(cache => cache.addAll(FILES_TO_CACHE))
    );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è
self.addEventListener('activate', event => {
    event.waitUntil(
        caches.keys().then(keys =>
            Promise.all(
                keys.filter(key => ![CACHE_NAME, API_CACHE].includes(key)).map(k => caches.delete(k))
            )
        )
    );
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', event => {
    const { request } = event;

    // üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å–ª–æ–≤–∞—Ä—è
    if (request.url.includes('/api/dictionary')) {
        event.respondWith(
            fetch(request)
                .then(response => {
                    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏ –∫–µ—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                    const cloned = response.clone();
                    caches.open(API_CACHE).then(cache => cache.put(request, cloned));
                    return response;
                })
                .catch(() => caches.match(request))
        );
        return;
    }

    // üß± –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∫–µ—à —Å—Ç–∞—Ç–∏–∫–∏
    event.respondWith(
        caches.match(request).then(resp =>
                resp || fetch(request).catch(() =>
                    new Response('–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞', { headers: { 'Content-Type': 'text/plain' } })
                )
        )
    );
});
